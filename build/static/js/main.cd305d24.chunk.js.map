{"version":3,"sources":["firebase.js","components/header/header.js","components/card/card.js","components/section/header.js","pages/home.js","pages/post.js","components/form/form.js","pages/create.js","pages/not-found.js","components/app/app.js","serviceWorker.js","index.js"],"names":["firebaseCache","Header","className","to","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getFirebase","firebase","initializeApp","Card","props","key","data","slug","src","coverImage","alt","coverImageAlt","title","style","color","datePretty","dangerouslySetInnerHTML","__html","content","substring","SectionHeader","desc","Home","useState","loading","setLoading","blogPosts","setBlogPosts","length","database","ref","orderByChild","once","then","snapshot","posts","snapshotVal","val","push","reverse","map","blogPost","index","Post","match","params","indexOf","Form","type","onSubmit","children","Create","setTitle","setSlug","setCoverImage","setCoverImageAlt","setContent","e","preventDefault","date","now","Date","year","getFullYear","month","getMonth","day","getDate","toLocaleDateString","generateDate","newPost","pretty","console","log","child","set","post","document","querySelector","reset","htmlFor","id","value","onChange","target","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd305d24.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: 'AIzaSyAlOmlhjOCg8CnaujQdmsdvs9GaQNh0Q5A',\n  authDomain: \"react-firebase-blog-55a8f.firebaseapp.com\",\n  databaseURL: \"https://react-firebase-blog-55a8f.firebaseio.com\",\n  projectId: \"react-firebase-blog-55a8f\",\n  storageBucket: \"react-firebase-blog-55a8f.appspot.com\",\n  messagingSenderId: \"1038489350270\",\n  appId: \"1:1038489350270:web:a0f4c3ce1a360b2199e82f\",\n}\n\nlet firebaseCache\n\nexport const getFirebase = () => {\n  if (firebaseCache) {\n    return firebaseCache\n  }\n\n  firebase.initializeApp(config)\n  firebaseCache = firebase\n  return firebase\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './header.scss'\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n\t\t\t<h1 className=\"site-title\"><Link to=\"/\">Over-easy</Link></h1>\n        \t\n\t\t\t<nav className=\"menu\">\n\t\t\t\t<Link to=\"/\">About</Link>\n\t\t\t\t<Link to=\"/\">Contact</Link>\n\t\t\t</nav>\n      \t</header>\n    )\n}\n\nexport default Header","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './card.scss'\n\nconst Card = props => {\n    return (\n        <>\n            {/* {console.log(props.data)} */}\n            <article key={props.data.slug} className=\"card\">\n                <img src={props.data.coverImage} alt={props.data.coverImageAlt} />\n                <div className=\"card-content\">\n                    <h2>{props.data.title} &mdash;{\" \"}\n                        <span style={{ color: \"#5e5e5e\" }}>{props.data.datePretty}</span>\n                    </h2>\n                    <p dangerouslySetInnerHTML={{\n                            __html: `${props.data.content.substring(0, 100)}...`\n                        }}\n                    ></p>\n                    <Link className=\"button read-more\" to={`/${props.data.slug}`}>Read more</Link>\n                </div>\n            </article>\n        </>\n    )\n}\n\nexport default Card","import React from 'react'\nimport './header.scss'\n\nconst SectionHeader = props => {\n    return (\n        <header className=\"section-header\">\n            <h1>{props.title}</h1>\n            { props.desc ? <p>{props.desc}</p> : '' }\n        </header>\n    )\n}\n\nexport default SectionHeader","import React, { useState } from 'react'\nimport { getFirebase } from '../firebase'\nimport Card from '../components/card/card'\nimport SectionHeader from '../components/section/header'\n\nconst Home = () => {\n\tconst [loading, setLoading] = useState(true);\n\tconst [blogPosts, setBlogPosts] = useState([]);\n\n\t// console.log('posts', blogPosts)\n\n\tif (loading && !blogPosts.length) {\n\t\tgetFirebase()\n\t\t\t.database()\n\t\t\t.ref(\"/posts\")\n\t\t\t.orderByChild(\"date\")\n\t\t\t.once(\"value\")\n\t\t\t.then(snapshot => {\n\t\t\t\tlet posts = []\n\t\t\t\tconst snapshotVal = snapshot.val()\n\t\t\n\t\t\t\tfor (let slug in snapshotVal) {\n\t\t\t\t\tposts.push(snapshotVal[slug])\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tposts.reverse()\n\t\t\t\tsetBlogPosts(posts);\n\t\t\t\tsetLoading(false); \n\t\t\t})\n\t\t}\n\n\tif (loading) {\n\t\treturn <h1>Loading...</h1>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<SectionHeader title=\"Blog\" desc=\"Check out some of the latest recipes.\" />\n\t\t\t<section className=\"cards\">\n\t\t\t\t{blogPosts.map((blogPost, index) => (\n\t\t\t\t\t<Card key={index} data={blogPost} />\n\t\t\t\t))}\n\t\t\t</section>\n\t\t</>\n\t)\n}\n\nexport default Home\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\n\nconst Post = ({ match }) => {\n\tconst slug = match.params.slug\n  \tconst postSlugs = [\"my-first-blog-post\", \"my-second-blog-post\"]\n\n  \tconst postDoesNotExist = postSlugs.indexOf(slug) === -1\n\tif (postDoesNotExist) {\n\t\treturn <Redirect to=\"/404\" />\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h1>This is a template for blog posts.</h1>\n\t\t\t<p>We'll get to this once we've hooked up Firebase!</p>\n\t\t</>\n\t)\n}\n\nexport default Post\n","import React from 'react'\nimport './form.scss'\n\nconst Form = props => {\n    return (\n        <form className={props.type} onSubmit={props.onSubmit}>\n            {props.children}\n        </form>\n    )\n}\n\nexport default Form","import React, { useState } from 'react'\nimport { getFirebase } from '../firebase'\nimport Form from '../components/form/form'\nimport SectionHeader from '../components/section/header'\n\nconst Create = () => {\n    const [title, setTitle] = useState('')\n    const [slug, setSlug] = useState('')\n    const [coverImage, setCoverImage] = useState('')\n    const [coverImageAlt, setCoverImageAlt] = useState('')\n    const [content, setContent] = useState('')\n\n    const generateDate = () => {\n        const now = new Date()\n        const year = now.getFullYear()\n        const options = { month: \"long\", day: \"numeric\", year: \"numeric\" }\n        \n        let month = now.getMonth() + 1\n        if (month < 10) {\n            month = `0${month}`\n        }\n        \n        let day = now.getDate()\n        if(day < 10) {\n            day `0${day}`\n        }\n\n        return {\n            \"formatted\": `${month}/${day}/${year}`,\n            \"pretty\": now.toLocaleDateString(\"en-US\", options)\n        }\n    }\n\n    const createPost = e => {\n        e.preventDefault()\n        const date = generateDate()\n\n        const newPost = {\n            title,\n            date: date.pretty,\n            slug,\n            coverImage,\n            coverImageAlt,\n            content\n        }\n\n        console.log('new post', newPost)\n\n        getFirebase()\n            .database()\n            .ref()\n            .child(`posts/${slug}`)\n            .set(newPost)\n            .then(post => console.log('post added'))\n\n        document.querySelector('Form').reset()\n    }\n\n    return (\n        <>\n            <section className=\"page-content\">\n                \n                <SectionHeader title=\"Create Post\" />\n\n                <Form type=\"create-post\" onSubmit={createPost}>\n                    <div className=\"form-field\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input id=\"title\" type=\"text\" value={title} \n                            onChange={({ target: { value } }) => {setTitle(value)}} /> \n                    </div>\n\n                    <div className=\"form-field\">\n                        <label htmlFor=\"slug\">Slug</label>\n                        <input id=\"slug\" type=\"text\" value={slug} \n                            onChange={({ target: { value } }) => {setSlug(value)}} /> \n                    </div>\n\n                    <div className=\"form-field\">\n                        <label htmlFor=\"cover\">Cover image</label>\n                        <input id=\"cover\" type=\"text\" value={coverImage} \n                            onChange={({ target: { value } }) => {setCoverImage(value)}} /> \n                    </div>\n\n                    <div className=\"form-field\">\n                        <label htmlFor=\"alt\">Alternative text</label>\n                        <input id=\"alt\" type=\"text\" value={coverImageAlt} \n                            onChange={({ target: { value } }) => {setCoverImageAlt(value)}} />\n                    </div>\n\n                    <div className=\"form-field\">\n                        <label htmlFor=\"content\">Content</label>\n                        <textarea id=\"content\" type=\"text\" value={content}\n                            onChange={({ target: { value } }) => {setContent(value)}} />\n                    </div>\n\n                    <button type=\"submit\">Create</button>\n                </Form>\n            </section>\n        </>\n    )\n}\n\nexport default Create","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => (\n  <>\n    <h1>Hmmm... can't seem to find that page.</h1>\n    <Link to=\"/\">Take me home</Link>\n  </>\n);\n\nexport default NotFound;\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport './app.scss'\nimport Header from '../header/header'\nimport Home from '../../pages/home'\nimport Post from '../../pages/post'\nimport Create from '../../pages/create'\nimport NotFound from '../../pages/not-found'\n\nfunction App() {\n  return (\n    <Router>\n    \t<Header />\n      \t<main>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t<Route path=\"/create\" component={Create} />\n\t\t\t\t<Route path=\"/404\" component={NotFound} />\n\t\t\t\t<Route path=\"/:slug\" component={Post} />\n\t\t\t</Switch>\n      \t</main>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './global/index.scss'\nimport App from './components/app/app'\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}